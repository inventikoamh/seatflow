---
globs: *.tsx,*.jsx,*.ts,*.js
description: JavaScript and TypeScript patterns for React components
---

# JavaScript/TypeScript Patterns

## TypeScript Configuration
Follow the configuration in [tsconfig.json](mdc:tsconfig.json) and [tsconfig.node.json](mdc:tsconfig.node.json).

### Type Definitions
```typescript
// Define interfaces for props
interface ButtonProps {
  variant?: 'primary' | 'secondary' | 'destructive';
  size?: 'sm' | 'md' | 'lg';
  children: React.ReactNode;
  onClick?: () => void;
}

// Define component props
interface UserProfileProps {
  user: {
    id: number;
    first_name: string;
    last_name: string;
    email: string;
    mobile?: string;
    theme_preference: 'light' | 'dark';
  };
}
```

### React Component Patterns
```typescript
// Functional component with TypeScript
const Button: React.FC<ButtonProps> = ({ 
  variant = 'primary', 
  size = 'md', 
  children, 
  onClick 
}) => {
  const baseClasses = "inline-flex items-center justify-center rounded-md font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50";
  
  const variantClasses = {
    primary: "bg-primary text-primary-foreground hover:bg-primary/90",
    secondary: "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
    destructive: "bg-destructive text-destructive-foreground hover:bg-destructive/90"
  };
  
  const sizeClasses = {
    sm: "h-9 px-3 text-sm",
    md: "h-10 px-4 py-2",
    lg: "h-11 px-8 text-lg"
  };
  
  return (
    <button 
      className={`${baseClasses} ${variantClasses[variant]} ${sizeClasses[size]}`}
      onClick={onClick}
    >
      {children}
    </button>
  );
};
```

### Theme Management
```typescript
// Theme switching functionality
class ThemeManager {
  private static instance: ThemeManager;
  
  private constructor() {
    this.init();
  }
  
  public static getInstance(): ThemeManager {
    if (!ThemeManager.instance) {
      ThemeManager.instance = new ThemeManager();
    }
    return ThemeManager.instance;
  }
  
  private init(): void {
    const savedTheme = localStorage.getItem('theme') || 'light';
    this.setTheme(savedTheme);
  }
  
  public setTheme(theme: 'light' | 'dark'): void {
    const html = document.documentElement;
    const body = document.body;
    
    if (theme === 'dark') {
      html.classList.add('dark');
      body.classList.add('dark');
    } else {
      html.classList.remove('dark');
      body.classList.remove('dark');
    }
    
    localStorage.setItem('theme', theme);
    this.updateServerTheme(theme);
  }
  
  private async updateServerTheme(theme: string): Promise<void> {
    try {
      const token = document.querySelector('meta[name="csrf-token"]')?.getAttribute('content');
      
      if (token) {
        await fetch('/theme', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'X-CSRF-TOKEN': token,
          },
          body: JSON.stringify({ theme }),
        });
      }
    } catch (error) {
      console.log('Theme update failed:', error);
    }
  }
}
```

### Event Handling
```typescript
// Form submission with loading state
const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
  e.preventDefault();
  
  const submitButton = e.currentTarget.querySelector('button[type="submit"]') as HTMLButtonElement;
  if (submitButton) {
    submitButton.disabled = true;
    submitButton.innerHTML = '<svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"><circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle><path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path></svg>Processing...';
  }
  
  try {
    // Handle form submission
    const formData = new FormData(e.currentTarget);
    const response = await fetch('/api/submit', {
      method: 'POST',
      body: formData,
    });
    
    if (response.ok) {
      // Handle success
    }
  } catch (error) {
    console.error('Form submission failed:', error);
  } finally {
    if (submitButton) {
      submitButton.disabled = false;
      submitButton.innerHTML = 'Submit';
    }
  }
};
```

### Mobile Menu Toggle
```typescript
// Mobile menu functionality
document.addEventListener('DOMContentLoaded', () => {
  const mobileMenuButton = document.querySelector('[data-mobile-menu-toggle]');
  const mobileMenu = document.querySelector('[data-mobile-menu]');
  
  if (mobileMenuButton && mobileMenu) {
    mobileMenuButton.addEventListener('click', () => {
      mobileMenu.classList.toggle('hidden');
    });
  }
});
```

### Error Handling
```typescript
// API error handling
const handleApiError = (error: unknown): string => {
  if (error instanceof Error) {
    return error.message;
  }
  return 'An unexpected error occurred';
};

// Form validation
const validateForm = (data: FormData): Record<string, string> => {
  const errors: Record<string, string> = {};
  
  const email = data.get('email') as string;
  if (!email || !email.includes('@')) {
    errors.email = 'Please enter a valid email address';
  }
  
  const password = data.get('password') as string;
  if (!password || password.length < 8) {
    errors.password = 'Password must be at least 8 characters';
  }
  
  return errors;
};
```

### Performance Optimization
```typescript
// Debounced search
const useDebounce = <T>(value: T, delay: number): T => {
  const [debouncedValue, setDebouncedValue] = useState<T>(value);
  
  useEffect(() => {
    const handler = setTimeout(() => {
      setDebouncedValue(value);
    }, delay);
    
    return () => {
      clearTimeout(handler);
    };
  }, [value, delay]);
  
  return debouncedValue;
};

// Memoized components
const ExpensiveComponent = React.memo<Props>(({ data }) => {
  return <div>{/* Expensive rendering */}</div>;
});
```

### Accessibility
```typescript
// ARIA attributes
const AccessibleButton: React.FC<ButtonProps & { 'aria-label'?: string }> = ({ 
  'aria-label': ariaLabel, 
  children, 
  ...props 
}) => {
  return (
    <button 
      aria-label={ariaLabel}
      {...props}
    >
      {children}
    </button>
  );
};
```